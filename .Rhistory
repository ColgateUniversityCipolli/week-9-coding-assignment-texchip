(beta.hat.mom <- moms$x[2])
s = seq(0,0.025,length.out=1000)
mom.dist <- tibble(x=s) |>
mutate(pdf = dbeta(x=s,alpha.hat.mom,beta.hat.mom))
llbeta <- function(data, par, neg=F){
alpha <- par[1]
beta <- par[2]
loglik <- sum(dbeta(x=data, alpha, beta, log=T), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
mles <- optim(par = c(1,1),
fn = llbeta,
data=death.rates$`2022`,
neg=T)
(alpha.hat.mle <- mles$par[1])
(beta.hat.mle <- mles$par[2])
mle.dist <- tibble(x=s) |>
mutate(pdf = dbeta(x=s,alpha.hat.mle,beta.hat.mle))
ggplot() +
geom_histogram(data=death.rates,
aes(x=`2022`,
y=after_stat(density)),
breaks=seq(0,0.024,0.002)) +
ggtitle("Histogram of Death Rates") +
geom_hline(yintercept=0) +
theme_bw() +
xlab("Death Rates") +
ylab("Density") +
geom_line(data = mom.dist, aes(x=x,y=pdf),
color="MoM", size=1) +
geom_line(data = mle.dist, aes(x=x,y=pdf),
color="MLE", size=1)
################################################################
##### Task Seven ###############################################
################################################################
library(nleqslv)
MOM.exp <- function(data, par){
alpha <- par[1]
beta <- par[2]
m1 <- mean(data, na.rm=T)
EX1 <- alpha/(alpha+beta)
m2 <- mean(data^2, na.rm=T)
EX2 <- (alpha+1)*alpha/((alpha+beta+1)*(alpha+beta))
return(c(EX1-m1, EX2-m2))
}
moms <- nleqslv(x = c(1,1),
fn = MOM.exp,
data=death.rates$`2022`)
(alpha.hat.mom <- moms$x[1])
(beta.hat.mom <- moms$x[2])
s = seq(0,0.025,length.out=1000)
mom.dist <- tibble(x=s) |>
mutate(pdf = dbeta(x=s,alpha.hat.mom,beta.hat.mom))
llbeta <- function(data, par, neg=F){
alpha <- par[1]
beta <- par[2]
loglik <- sum(dbeta(x=data, alpha, beta, log=T), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
mles <- optim(par = c(1,1),
fn = llbeta,
data=death.rates$`2022`,
neg=T)
(alpha.hat.mle <- mles$par[1])
(beta.hat.mle <- mles$par[2])
mle.dist <- tibble(x=s) |>
mutate(pdf = dbeta(x=s,alpha.hat.mle,beta.hat.mle))
ggplot() +
geom_histogram(data=death.rates,
aes(x=`2022`,
y=after_stat(density)),
breaks=seq(0,0.024,0.002)) +
ggtitle("Histogram of Death Rates") +
geom_hline(yintercept=0) +
theme_bw() +
xlab("Death Rates") +
ylab("Density") +
geom_line(data = mom.dist, aes(x=x,y=pdf),
color="red", size=1) +
geom_line(data = mle.dist, aes(x=x,y=pdf),
color="blue", size=1)
ggsave("task7.png", width = 5, height = 4)
################################################################
##### Task Seven ###############################################
################################################################
library(nleqslv)
MOM.exp <- function(data, par){
alpha <- par[1]
beta <- par[2]
m1 <- mean(data, na.rm=T)
EX1 <- alpha/(alpha+beta)
m2 <- mean(data^2, na.rm=T)
EX2 <- (alpha+1)*alpha/((alpha+beta+1)*(alpha+beta))
return(c(EX1-m1, EX2-m2))
}
moms <- nleqslv(x = c(1,1),
fn = MOM.exp,
data=death.rates$`2022`)
(alpha.hat.mom <- moms$x[1])
(beta.hat.mom <- moms$x[2])
s = seq(0,0.025,length.out=1000)
mom.dist <- tibble(x=s) |>
mutate(pdf = dbeta(x=s,alpha.hat.mom,beta.hat.mom))
llbeta <- function(data, par, neg=F){
alpha <- par[1]
beta <- par[2]
loglik <- sum(dbeta(x=data, alpha, beta, log=T), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
mles <- optim(par = c(1,1),
fn = llbeta,
data=death.rates$`2022`,
neg=T)
(alpha.hat.mle <- mles$par[1])
(beta.hat.mle <- mles$par[2])
mle.dist <- tibble(x=s) |>
mutate(pdf = dbeta(x=s,alpha.hat.mle,beta.hat.mle))
ggplot() +
geom_histogram(data=death.rates,
aes(x=`2022`,
y=after_stat(density)),
breaks=seq(0,0.024,0.002)) +
ggtitle("Histogram of Death Rates") +
geom_hline(yintercept=0) +
theme_bw() +
xlab("Death Rates") +
ylab("Density") +
geom_line(data = mom.dist, aes(x=x,y=pdf, color = "MoM"), size=1) +
geom_line(data = mle.dist, aes(x=x,y=pdf, color = "MLE"), size=1) +
scale_color_manual(values = c("MoM" = "red", "MLE" = "blue"))
ggsave("task7.png", width = 5, height = 4)
ggplot() +
geom_histogram(data=death.rates,
aes(x=`2022`,
y=after_stat(density)),
breaks=seq(0,0.024,0.002)) +
ggtitle("Histogram of Death Rates") +
geom_hline(yintercept=0) +
theme_bw() +
xlab("Death Rates") +
ylab("Density") +
geom_line(data = mom.dist, aes(x=x,y=pdf, color = "MoM"), size=1) +
geom_line(data = mle.dist, aes(x=x,y=pdf, color = "MLE"), size=1) +
scale_color_manual(values = c("MoM" = "red", "MLE" = "blue")) +
theme(legend.position = c(0.7, 0.8))
ggsave("task7.png", width = 5, height = 4)
ggplot() +
geom_histogram(data=death.rates,
aes(x=`2022`,
y=after_stat(density)),
breaks=seq(0,0.024,0.002)) +
ggtitle("Histogram of Death Rates") +
geom_hline(yintercept=0) +
theme_bw() +
xlab("Death Rates") +
ylab("Density") +
geom_line(data = mom.dist, aes(x=x,y=pdf, color = "MoM"), size=1) +
geom_line(data = mle.dist, aes(x=x,y=pdf, color = "MLE"), size=1) +
scale_color_manual(values = c("MoM" = "red", "MLE" = "blue")) +
theme(legend.position = c(0.8, 0.8))
ggsave("task7.png", width = 5, height = 4)
set.seed(7272)
sample.size <- 500
library(e1071)
bsample <- function(alpha, beta){
beta.sample <- rbeta(n = sample.size,
shape1 = alpha,
shape2 = beta)
return(beta.sample)
}
hist.plots <- function(alpha, beta){
beta.sample <- bsample(alpha,beta)
beta.df <- data.frame(x = beta.sample)
hist <- ggplot(beta.df, aes(x)) +
geom_histogram(aes(y = after_stat(density)), bins = 20) +
geom_density(color = "Estimated Density") +
stat_function(fun = dbeta,
args = list(shape1 = alpha, shape2 = beta),
color = "PDF") +
scale_color_manual(values = c("Estimated Density" = "red", "PDF" = "blue")) +
theme_bw() +
xlab("x") +
ylab("Density") +
geom_hline(yintercept = 0)+
ggtitle(paste0("Histogram: Beta(", alpha, ", ", beta, ")"))
set.seed(7272)
sample.size <- 500
library(e1071)
bsample <- function(alpha, beta){
beta.sample <- rbeta(n = sample.size,
shape1 = alpha,
shape2 = beta)
return(beta.sample)
}
hist.plots <- function(alpha, beta){
beta.sample <- bsample(alpha,beta)
beta.df <- data.frame(x = beta.sample)
hist <- ggplot(beta.df, aes(x)) +
geom_histogram(aes(y = after_stat(density)), bins = 20) +
geom_density(color = "Estimated Density") +
stat_function(fun = dbeta,
args = list(shape1 = alpha, shape2 = beta),
color = "PDF") +
scale_color_manual(values = c("Estimated Density" = "red", "PDF" = "blue")) +
theme_bw() +
xlab("x") +
ylab("Density") +
geom_hline(yintercept = 0)+
ggtitle(paste0("Histogram: Beta(", alpha, ", ", beta, ")"))
summary <- beta.df |>
summarize(
mean = mean(beta.sample),
variance = var(beta.sample),
skewness = skewness(beta.sample),
excess.kurtosis = kurtosis(beta.sample))
return(hist)
}
histograms <- list()
for(i in 1:length(alpha)){
histograms[[i]] <- hist.plots(alpha[i], beta[i]) + xlim(0,1) + ylim(0,3)
}
full.hist <- wrap_plots(histograms, ncol = 2)
ggsave("task3.png", width = 5, height = 4)
################################################################
##### Task 3 ###################################################
################################################################
set.seed(7272)
sample.size <- 500
library(e1071)
bsample <- function(alpha, beta){
beta.sample <- rbeta(n = sample.size,
shape1 = alpha,
shape2 = beta)
return(beta.sample)
}
hist.plots <- function(alpha, beta){
beta.sample <- bsample(alpha,beta)
beta.df <- data.frame(x = beta.sample)
hist <- ggplot(beta.df, aes(x)) +
geom_histogram(aes(y = after_stat(density)), bins = 20) +
geom_density(color = "Estimated Density") +
stat_function(fun = dbeta,
args = list(shape1 = alpha, shape2 = beta),
color = "blue") +
scale_color_manual(values = c("Estimated Density" = "red")) +
theme_bw() +
xlab("x") +
ylab("Density") +
geom_hline(yintercept = 0)+
ggtitle(paste0("Histogram: Beta(", alpha, ", ", beta, ")"))
summary <- beta.df |>
summarize(
mean = mean(beta.sample),
variance = var(beta.sample),
skewness = skewness(beta.sample),
excess.kurtosis = kurtosis(beta.sample))
return(hist)
}
histograms <- list()
for(i in 1:length(alpha)){
histograms[[i]] <- hist.plots(alpha[i], beta[i]) + xlim(0,1) + ylim(0,3)
}
full.hist <- wrap_plots(histograms, ncol = 2)
ggsave("task3.png", width = 5, height = 4)
print(full.hist)
################################################################
##### Task 3 ###################################################
################################################################
set.seed(7272)
sample.size <- 500
library(e1071)
bsample <- function(alpha, beta){
beta.sample <- rbeta(n = sample.size,
shape1 = alpha,
shape2 = beta)
return(beta.sample)
}
hist.plots <- function(alpha, beta){
beta.sample <- bsample(alpha,beta)
beta.df <- data.frame(x = beta.sample)
hist <- ggplot(beta.df, aes(x)) +
geom_histogram(aes(y = after_stat(density)), bins = 20) +
geom_density(color = "Estimated Density") +
stat_function(fun = dbeta,
args = list(shape1 = alpha, shape2 = beta),
color = "blue") +
scale_color_manual("Estimated Density" = "red") +
theme_bw() +
xlab("x") +
ylab("Density") +
geom_hline(yintercept = 0)+
ggtitle(paste0("Histogram: Beta(", alpha, ", ", beta, ")"))
summary <- beta.df |>
summarize(
mean = mean(beta.sample),
variance = var(beta.sample),
skewness = skewness(beta.sample),
excess.kurtosis = kurtosis(beta.sample))
return(hist)
}
histograms <- list()
for(i in 1:length(alpha)){
histograms[[i]] <- hist.plots(alpha[i], beta[i]) + xlim(0,1) + ylim(0,3)
}
################################################################
##### Task 3 ###################################################
################################################################
set.seed(7272)
sample.size <- 500
library(e1071)
bsample <- function(alpha, beta){
beta.sample <- rbeta(n = sample.size,
shape1 = alpha,
shape2 = beta)
return(beta.sample)
}
hist.plots <- function(alpha, beta){
beta.sample <- bsample(alpha,beta)
beta.df <- data.frame(x = beta.sample)
hist <- ggplot(beta.df, aes(x)) +
geom_histogram(aes(y = after_stat(density)), bins = 20) +
geom_density(color = "red") +
stat_function(fun = dbeta,
args = list(shape1 = alpha, shape2 = beta),
color = "blue") +
theme_bw() +
xlab("x") +
ylab("Density") +
geom_hline(yintercept = 0)+
ggtitle(paste0("Histogram: Beta(", alpha, ", ", beta, ")"))
summary <- beta.df |>
summarize(
mean = mean(beta.sample),
variance = var(beta.sample),
skewness = skewness(beta.sample),
excess.kurtosis = kurtosis(beta.sample))
return(hist)
}
histograms <- list()
for(i in 1:length(alpha)){
histograms[[i]] <- hist.plots(alpha[i], beta[i]) + xlim(0,1) + ylim(0,3)
}
full.hist <- wrap_plots(histograms, ncol = 2)
ggsave("task3.png", width = 5, height = 4)
print(full.hist)
################################################################
##### Task 3 ###################################################
################################################################
set.seed(7272)
sample.size <- 500
library(e1071)
bsample <- function(alpha, beta){
beta.sample <- rbeta(n = sample.size,
shape1 = alpha,
shape2 = beta)
return(beta.sample)
}
hist.plots <- function(alpha, beta){
beta.sample <- bsample(alpha,beta)
beta.df <- data.frame(x = beta.sample)
hist <- ggplot(beta.df, aes(x)) +
geom_histogram(aes(y = after_stat(density)), bins = 20) +
geom_density(color = "red") +
stat_function(fun = dbeta,
args = list(shape1 = alpha, shape2 = beta),
color = "blue") +
theme_bw() +
xlab("x") +
ylab("Density") +
geom_hline(yintercept = 0) +
ggtitle(paste0("Histogram: Beta(", alpha, ", ", beta, ")"))
summary <- beta.df |>
summarize(
mean = mean(beta.sample),
variance = var(beta.sample),
skewness = skewness(beta.sample),
excess.kurtosis = kurtosis(beta.sample))
return(hist)
}
histograms <- list()
for(i in 1:length(alpha)){
histograms[[i]] <- hist.plots(alpha[i], beta[i]) + xlim(0,1) + ylim(0,3)
}
full.hist <- wrap_plots(histograms, ncol = 2)
ggsave("task3.png", width = 5, height = 4)
print(full.hist)
################################################################
##### Task 3 ###################################################
################################################################
set.seed(7272)
sample.size <- 500
library(e1071)
bsample <- function(alpha, beta){
beta.sample <- rbeta(n = sample.size,
shape1 = alpha,
shape2 = beta)
return(beta.sample)
}
hist.plots <- function(alpha, beta){
beta.sample <- bsample(alpha,beta)
beta.df <- data.frame(x = beta.sample)
hist <- ggplot(beta.df, aes(x)) +
geom_histogram(aes(y = after_stat(density)), bins = 20) +
geom_density(color = "red") +
stat_function(fun = dbeta,
args = list(shape1 = alpha, shape2 = beta),
color = "blue") +
theme_bw() +
xlab("x") +
ylab("Density") +
geom_hline(yintercept = 0)+
ggtitle(paste0("Histogram: Beta(", alpha, ", ", beta, ")"))
summary <- beta.df |>
summarize(
mean = mean(beta.sample),
variance = var(beta.sample),
skewness = skewness(beta.sample),
excess.kurtosis = kurtosis(beta.sample))
return(hist)
}
histograms <- list()
for(i in 1:length(alpha)){
histograms[[i]] <- hist.plots(alpha[i], beta[i]) + xlim(0,1) + ylim(0,3)
}
full.hist <- wrap_plots(histograms, ncol = 2)
ggsave("task3.png", width = 5, height = 4)
print(full.hist)
source("~/Documents/Spring2025/Computational Statistics with R/GitHub/lab-7-exploring-the-beta-distribution-texchip/pleclerc_lab7.R", echo=TRUE)
################################################################
##### Task 1 ###################################################
################################################################
library(patchwork)
library(tidyverse)
beta.stats <- function(alpha, beta){
mean <- alpha/(alpha+beta)
variance <- (alpha*beta)/((alpha+beta)^2*(alpha+beta+1))
skewness <- (2*(beta-alpha)*(sqrt(alpha+beta+1)))/((alpha+beta+2)*sqrt(alpha*beta))
excess.kurtosis <- ((6*((alpha-beta)^2*(alpha+beta+1)-alpha*beta*(alpha+beta+2)))/
(alpha*beta*(alpha+beta+2)*(alpha+beta+3)))
return(tibble(alpha, beta, mean, variance, skewness, excess.kurtosis))
}
beta.plots <- function(alpha, beta){
tib <- beta.stats(alpha, beta)
q1.fig.dat <- tibble(x = seq(-0.25, 1.25, length.out=1000))|>
mutate(beta.pdf = dbeta(x, alpha, beta))
cplot <- ggplot(data= q1.fig.dat)+
geom_line(aes(x=x, y=beta.pdf)) +
geom_hline(yintercept=0) +
theme_bw()+
xlab("x")+
ylab("Density")+
ggtitle(paste0("Beta(", alpha, ", ", beta, ") Distribution"))
return(cplot)
}
plots <- list()
alpha <- c(2,5,5,0.50)
beta <- c(5,5,2,0.50)
beta.table <- tibble()
for(i in 1:length(alpha)){
plots[[i]] <- beta.plots(alpha[i], beta[i]) + xlim(0,1) + ylim(0,3)
btable <- beta.stats(alpha[i],beta[i])
beta.table <- bind_rows(beta.table, btable)
}
#view(beta.table)
full.plot <- wrap_plots(plots, ncol = 2) +
labs(caption = "Data generated from a Beta distribution with parameters alpha and beta.")
ggsave("task1.png", width = 5, height = 4)
print(full.plot)
################################################################
##### Task 1 ###################################################
################################################################
library(patchwork)
library(tidyverse)
beta.stats <- function(alpha, beta){
mean <- alpha/(alpha+beta)
variance <- (alpha*beta)/((alpha+beta)^2*(alpha+beta+1))
skewness <- (2*(beta-alpha)*(sqrt(alpha+beta+1)))/((alpha+beta+2)*sqrt(alpha*beta))
excess.kurtosis <- ((6*((alpha-beta)^2*(alpha+beta+1)-alpha*beta*(alpha+beta+2)))/
(alpha*beta*(alpha+beta+2)*(alpha+beta+3)))
return(tibble(alpha, beta, mean, variance, skewness, excess.kurtosis))
}
beta.plots <- function(alpha, beta){
tib <- beta.stats(alpha, beta)
q1.fig.dat <- tibble(x = seq(-0.25, 1.25, length.out=1000))|>
mutate(beta.pdf = dbeta(x, alpha, beta))
cplot <- ggplot(data= q1.fig.dat)+
geom_line(aes(x=x, y=beta.pdf)) +
geom_hline(yintercept=0) +
theme_bw()+
xlab("x")+
ylab("Density")+
ggtitle(paste0("Beta(", alpha, ", ", beta, ") Distribution"))
return(cplot)
}
plots <- list()
alpha <- c(2,5,5,0.50)
beta <- c(5,5,2,0.50)
beta.table <- tibble()
for(i in 1:length(alpha)){
plots[[i]] <- beta.plots(alpha[i], beta[i]) + xlim(0,1) + ylim(0,3)
btable <- beta.stats(alpha[i],beta[i])
beta.table <- bind_rows(beta.table, btable)
}
#view(beta.table)
full.plot <- wrap_plots(plots, ncol = 2) +
labs(caption = "Plots of beta distributions with different alpha and beta values.") +
theme(plot.caption = element_text(hjust = 0.5))
ggsave("task1.png", width = 5, height = 4)
print(full.plot)
source("~/Documents/Spring2025/Computational Statistics with R/GitHub/lab-7-exploring-the-beta-distribution-texchip/pleclerc_lab7.R", echo=TRUE)
source("~/Documents/Spring2025/Computational Statistics with R/GitHub/lab-7-exploring-the-beta-distribution-texchip/pleclerc_lab7.R", echo=TRUE)
setwd("~/Documents/Spring2025/Computational Statistics with R/GitHub/week-9-coding-assignment-texchip")
